Intro to react forms
_______________________________________________________
we have not yet covered how we write forms in the react way 

the html stuff is not different 
the way we manage it is 

build forms with react 
understand what control components in react are 

so we put a form and input and we are adding in a form to put in a username

in vanilla js we would grab the document.querySelector grab the input 

prevent the default refresh and then we would look at the input.value 

A user could do a bunch of stuff on the field and then we wait until the user submit 

there is a period between when the user is typing and when they submit

form elements naturally keep some internal state 

in react what we want to do is know what that data is 

as we type into the input , we want to know when something changes in the form 

in react instead of having look at the input and find the value,
if we set the forms up correctly then we will know what the current value is by looking at the state 


our form will stay in sync with react 

with vanilla dom manipulation we would typically wait until a form has been submitted 

we are going to be using controlled components so that we know every value in an input or in a form 

our component will be able to look in the state to find out exactly what is in there 

in HTML form elements such as input textarea and select maintain their own state 

in React mutable state is kept in the state 

we male the React state to be the single source of truth 

React controls:
-what is shown 
-what happens when the user types 

react is going to be putting the data in there 

it is a different approach than what we know to handle this 


_______________________________________________________
First Controlled Input
_______________________________________________________
our goal is to control what is showing and what happens when a user types 

const UserForm = () => {
    const [username, setUsername] = useState("ChickenLady")
    return (
        <form>
            <input type='text' placeholder="username" value={username} />
            <button>Add me to the List!</button>
        </form>
    )
}

written like this we are currently unable to change it because react is keeping it to be chicken lady 

what is happening is that we need something called onChange handler 

thats the second piece
"what happens when the user types"

we are going to call some function that we put in as onChange

and we have this 

    const handleChange = (event) => {
        console.log(event.target.value)
        // setUsername()
    }

we can see that we are just changing the last character but if we make use of the setState property then we can change it 

import React, { useState } from 'react';

const UserForm = () => {
    const [username, setUsername] = useState("ChickenLady")
    const handleChange = (event) => {
        // console.log(event.target.value)
        setUsername(event.target.value)
    }
    return (
        <form>
            <input type='text' placeholder="username" value={username} onChange={handleChange} />
            <button>Add me to the List!</button>
        </form>
    )
}
export default UserForm;

so now we have a controlled input that is going to update a state everytime a change happens 

so now if a user types they are able to change the value 

and that is a pattern that we will be using, 

a value changes and the state is updated 
_______________________________________________________
Submitting forms
_______________________________________________________
now that we have our controlled input in place if we need to view the data we just check our state

if we want to handle submit we can add in a function to do that 

this is the beauty of doing controlled components because we can just look in the state to know what it is 

we can add the handle submit but the default behavior is still to refresh the page 

so if we have a button we know that it will submit 

so we just need the event object and we can prevent the default page behavior and we can preserve the state. 

we could also add an onSubmit instead of onClick

pretty much the same thing but we put the onSubmit on the form itself not the button 

and we can update the setUsername after we submit to just a blank field

typically what we would do is pass this data down and use a function to create a user or something 



_______________________________________________________
htmlFor
_______________________________________________________

Thinking about labels 

labels in react 

we need to use labels to make our forms readable and accessible by all users 

a label makes it easier for a screen readers and a user to make it easier to read 

so we can add a label 

and then we give that a for property that corresponds to an input field 

and if we click on that label it goes to our field 

the word for is reserved so we use htmlFor for our labels 


_______________________________________________________
Multiple Inputs
_______________________________________________________
Forms that have more than 1 input 

lets throw in another input 

what we have is pretty long and we have state handlers for each field and we only have 2 

all of these things

ES2015 Review 

introduced a few object enhancements 
we can create dynamic literals 

Computed property names 

var isntructorData = {};
var isntructorData = "elie";
isntructorData[isntructorData] = "Elie Schoppik

ES2015
let instructorCode = "elie"
let instructorData = {
    [instructorCode]: "ElieSchoppik"
}

so instead of making a seperate onChange for each input we can make a generic one 

so first to have this work we need to combine our state 

and for each state that we want to keep track of we will have a key in the object for formData 

so we are no longer going to be putting in username but instead formData.username 

now about the onChange property 

we want to add in a "name" property to our inputs 
the name property is something we have access to in our event.target 

so we are going to use computed properties and set the name as a key and the value as a value 

so now we have a handle change function that works with a number of input fields 

and if we check the state we can see that everything is working as we intend it to

if we want to reset all of the fields to have a clear field then we can make a new variable called initialState with the object that we want to reset

name needs to match the property that we find in the state 


_______________________________________________________
Forms Pass Data up
_______________________________________________________
lets make a shopping list component to see how a form creates a new piece of information 

a new todo, new product, new item 

for now we can just create a list with some lis 

we can have a 
product : peanutbutter
price : 2.99 


import React from 'react';

const Item = ({ id, name, qty }) => {
    return (
        <ul>
            <li>Product Name: {name}</li>
            <li>Quantity: {qty}</li>

        </ul>
    )
}

export default Item;

we created an Item component that we want on our shopping list and we also have a ShoppingList 

now we want to add in a form component into our react 

and forms have their own state so how do we confugure it?

in the case of a form , the form has its own state, they have their own so they can control the input 

so we have the form and we are going to use the form state to update the shopping list 

Form manages its own state
The parent component will pass down a method 
the form will call that on submission 
we are passing data upwards by calling a method we pass down as a prop 

first lets define our form initial state 

it will be a single object 

and we want name and qty 

so now we have a single input

import React, { useState } from 'react';

const NewItemForm = () => {
    const INITIAL_STATE = {
        name: '',
        qty: '',
    }
    const [formData, setFormData] = useState(INITIAL_STATE)
    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData(formData => ({
            ...formData,
            [name]: value
        }))
    }
    return (
        <form>
            <label htmlFor='name'>Product</label>
            <input
                id="name"
                type='text'
                name='name'
                placeholder='Item Name'
                value={formData.name}
                onChange={handleChange} />

            <label htmlFor='qty'>Quantity</label>
            <input
                type='text'
                name='qty'
                placeholder='Quantity'
                value={formData.qty}
                onChange={handleChange}
            />
            <p>{formData.name}</p>
            <p>{formData.qty}</p>
        </form>

    )
}


this form has two inputs now 

but we want to update the parent form 

so that we add in the new product in the items array in shopping list 

so lets add an onSubmit

the form state is local to our form state component 
but we can add a function called add item into our parent component 

    const addItem = (name, qty) => {
        // adding this in to a new array, not mutating the original array
        // add in the new product and new item 
        setItems(items => [...items, { name, qty }])
    }

and then we take that function and we pass it down to the form 

<NewItemForm addItem={addItem} />

 so now we jump over to our form component and we can destructure the prop method we just passed down for on item 

so no we have our function working and there will be some changes to the components but the flow is basically down 


we are going to refactor in the next video so here is the current state of our NewItemForm component 

import React, { useState } from 'react';

const NewItemForm = ({ addItem }) => {
    const INITIAL_STATE = {
        name: '',
        qty: '',
    }
    const [formData, setFormData] = useState(INITIAL_STATE)
    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData(formData => ({
            ...formData,
            [name]: value
        }))
    }
    const handleSubmit = (e) => {
        e.preventDefault();
        addItem(formData.name, formData.qty);
        setFormData(INITIAL_STATE)

    }
    return (
        <form onSubmit={handleSubmit}>
            <label htmlFor='name'>Product</label>
            <input
                id="name"
                type='text'
                name='name'
                placeholder='Item Name'
                value={formData.name}
                onChange={handleChange} />

            <label htmlFor='qty'>Quantity</label>
            <input
                type='text'
                name='qty'
                placeholder='Quantity'
                value={formData.qty}
                onChange={handleChange}
            />
            <button>Add Item</button>
        </form>

    )
}

export default NewItemForm;




_______________________________________________________
Refining Forms
_______________________________________________________
we need to add in a key \

we currently dont have a unique key prop 

if we dont have something that makes sense , like usually we would have an id from a database coming from an api 

we can use uuid library 

all that we have to do to use it is import it from uuid 

import uuid from 'uuid/v4';

it is a function we can execute

had to find this in the docs to have it import correcctly 


import { v4 as uuid } from 'uuid';

and now in the state we can see that the uuid is creating several stringed id so that we can have unique ids 

the way we are passing the data up is not currently that cumbersome 

but with several form data fields would be more cumbersome 

if we do need all of the information from the form then we are going to pass it all up 


addItem(formData.name, formData.qty);

this line turns to this 

addItem({...formData});

but now we have to change how add item works to extract the values from the object we are going to be passing up 

const addItem = (newItem) => {
        // adding this in to a new array, not mutating the original array
        // add in the new product and new item 

        setItems(items => [...items, { ...newItem, id: uuid() }])
    }

so we have our new Item , we create a new object with the newItem and we add in an idea , where the new object contains the name and qty of the item we are adding in 

so now we can add in 10 more fields into our form and we dont have to change our handle submit 

we have been doing text inputs but we can do a range input 

and we can just change that 

<label htmlFor='qty'>Quantity</label>
            <input
                type='range' min='1' max='10'
                name='qty'
                placeholder='Quantity'
                value={formData.qty}
                onChange={handleChange}
            />

            makes it still work and be able to add items 

we should display what we are selecting too 
and we can display that piece of state in the label 

and we can do this with all of the commone input elements that are frequently used in forms 

gives a nice little summary at the end of the video about the way it all works together 


_______________________________________________________
Testing Forms
_______________________________________________________
testing components that contain forms 

we have our shopping list components 

for example if we add in a new item that is expecting chocolate milk to not show up 

to test typing in form inputs we can use fireEvent.change
we will need to mock event.target.value 

we just tested for product and the code is below 

import React from 'react';
import { render, fireEvent } from "@testing-library/react";
import ShoppingList from "./ShoppingList"
import Item from './Item';

it("renders without crashing", function () {
    render(<ShoppingList />);
});

it("matches snapshot", function () {
    const { asFragment } = render(<ShoppingList />);
    expect(asFragment()).toMatchSnapshot();
})

it("should add a new item", function () {
    // extracting our query selectors for the testing
    const { queryByText, getByLabelText } = render(<ShoppingList />);
    // we are checking only product so lets use the get LabelText
    const input = getByLabelText("Product");
    // grabbing our button by the text
    const btn = queryByText("Add Item");
    // we are making sure that the product we want to check is not in the form
    expect(queryByText("Product Name: Chocolate Milk")).not.toBeInTheDocument();
    // this is basically us filling out the form , we are selecting the field and adding in the value
    fireEvent.change(input, { target: { value: "Chocolate Milk" } });
    // now we submit 
    fireEvent.click(btn);
    expect(queryByText("Product Name: Chocolate Milk")).toBeInTheDocument();
    // and we can follow the same steps for quantity
})
import React from 'react';
import { render, fireEvent } from "@testing-library/react";
import ShoppingList from "./ShoppingList"
import Item from './Item';

it("renders without crashing", function () {
    render(<ShoppingList />);
});

it("matches snapshot", function () {
    const { asFragment } = render(<ShoppingList />);
    expect(asFragment()).toMatchSnapshot();
})

it("should add a new item", function () {
    // extracting our query selectors for the testing
    const { queryByText, getByLabelText } = render(<ShoppingList />);
    // we are checking only product so lets use the get LabelText
    const input = getByLabelText("Product");
    // grabbing our button by the text
    const btn = queryByText("Add Item");
    // we are making sure that the product we want to check is not in the form
    expect(queryByText("Product Name: Chocolate Milk")).not.toBeInTheDocument();
    // this is basically us filling out the form , we are selecting the field and adding in the value
    fireEvent.change(input, { target: { value: "Chocolate Milk" } });
    // now we submit 
    fireEvent.click(btn);
    expect(queryByText("Product Name: Chocolate Milk")).toBeInTheDocument();
    // and we can follow the same steps for quantity
})




_______________________________________________________
Uncontrolled Components
_______________________________________________________
all of the forms we have written so far is controlled components/forms 

react is render the forms with state 

we change the input by changing the state 
react is in charge of each input 

this works well because our component is always in sync 

there are times we might need to write uncontrolled component 

instead we would have something more like a jquery to do app 

we can implement it in react and have react not know what is in the form 

most of the time this is not a reacty practice 

certain inputs and some external libraries cover it 

form data would be handled by the DOM itself 

there is no state at all but there is a form and the form is just a regular input and on the on submit it is grabbing the valye 

so react is blind until we get the phone 
react wont see it until it is submitted 

one of the cases is if we are working or integrating with some non react code 

rewriting forms can be tricky 

one situation where we dont have a choice at all is with a file input 

there is no way to use code to set the value of a file input because they come from a user's machine 

if we think of the other inputs , react is setting the value everytime the state is updated 

that will not work with a file input 
that cannot work with a controlled component but for the most part we can get by with controlled components 


_______________________________________________________
Validations
_______________________________________________________

Form validation with react 

this can get complicated with react if we are doing it all on our own 

we want to provide some feedback for the user 

rather than submit we want to make sure the user gets some immediate feedback before submitting a form 

but we also want to check stuff from the server side 

we want both forms of validation 
client side validation is a nice experience 

if we want to just check that an email validation is happening 

that it fits within our rules 

something like a password meter 

with a controlled input we can do that 

we are going to just add in a span to say that the email cannot be blank 

so we are going to need to make a piece of state 

const [isInvalid, setIsInvalid] = useState(true)
defaults to true so that we are assuming the email field is empty and therefore is Invalid

so we just need to figure out when we want to flip that value 

if (value === '') {
            setIsInvalid(true);

        } else {
            setIsInvalid(false)
        }

so here is our janky code 

but its working 

then if we want to prevent a submission of an invalid field then we need to check if the field is not invalid 

if (!isInvalid) {
            alert(`Added you to mailing list ${email}`)
            setFormData(initialState)
        }

and so then if we accept it then we can submit 

now we have another problem that the user would see

everything is invalid in the field 

but we want to wait until a user actually starts typing 


so we make a piece of state to check if it has been touched 

setIsTouched(true)

then we set that in the event changer which activates once a user touches the field 

then we update and only render our span if a user has touched it and the field is blank 

{isInvalid && isTouched && <span style={{ color: 'red' }}>Email cannot be blank!</span>}

and this is just one field 

what if we want to check product quanity all of these field 

validating for multiple validations is kind of a nightmare (fromscratch)

there are many tools 

we can use Formik 

Formik is a tool that helps you build react forms 
its a package we need to isntall 

download it 

we get a function called useFormik() 

check out the tutorial 

we get errors and validation 

we just tell it the initial values and it sets everything else up 

makes a huge difference 

there are tons of tools 

formik gives you a lot of controls over your forms 

material ui is react components that are pretty nice , it has a bunch of components built in 

there is a formik material ui 

it combines material ui and formik 

there is also one for bootstrap called react-strap 

this library does not do the validation for you it just gives you the input being valid or invalid 

writing validation on our own can be painful but you are not a bad developer for not using tool because trying to define your own is time consuming and difficult to maintain 


_______________________________________________________
Mentor notes
_______________________________________________________


you will use the first time a component is laoded 

useEffect 

your component probably starts with external data from an api 

when the component loaded do something 

most likely fetch 

useEffect can load the fetch  

fetch library 

react redux - can use it along with state 
been around longer than hooks 

trying to have one place where your state lives 

would get its state from the same redux

redux solves that issue of having to pass around code 

planning comes in handy but as projects get more complex 

